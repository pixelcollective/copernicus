{"remainingRequest":"/Users/kellymears/code/sites/fleek.dev/site/web/app/plugins/copernicus/docs/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/kellymears/code/sites/fleek.dev/site/web/app/plugins/copernicus/docs/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/kellymears/code/sites/fleek.dev/site/web/app/plugins/copernicus/docs/node_modules/source-map-loader/index.js!/Users/kellymears/code/sites/fleek.dev/site/web/app/plugins/copernicus/docs/md/configuration.mdx","dependencies":[{"path":"/Users/kellymears/code/sites/fleek.dev/site/web/app/plugins/copernicus/docs/md/configuration.mdx","mtime":1561236274940},{"path":"/Users/kellymears/code/sites/fleek.dev/site/web/app/plugins/copernicus/docs/node_modules/cache-loader/dist/cjs.js","mtime":1561229345214},{"path":"/Users/kellymears/code/sites/fleek.dev/site/web/app/plugins/copernicus/docs/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1559585071110},{"path":"/Users/kellymears/code/sites/fleek.dev/site/web/app/plugins/copernicus/docs/node_modules/@mdx-js/loader/index.js","mtime":1561229345363},{"path":"/Users/kellymears/code/sites/fleek.dev/site/web/app/plugins/copernicus/docs/node_modules/source-map-loader/index.js","mtime":1561229345898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/kellymears/code/sites/fleek.dev/site/web/app/plugins/copernicus/docs/md/configuration.mdx"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAA6C;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA7C,MAJK,EAKL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BALK,EAQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAH,gJARK,EASL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CATK,EAYL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4NADF,CAZK,EAeL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAfK,EAkBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mKADF,CAlBK,EAqBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFArBK,EAsBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8QAAL,CAtBK,EAqCL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCArCK,EAwCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4+SAAL,CAxCK,CAAP;AA0SD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAzTMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"configuration\"\n    }}>{`Configuration`}</h1>\n    <p>{`All configuration files are stored in `}<inlineCode parentName=\"p\">{`/config`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"configuring-the-editor\"\n    }}>{`Configuring the Editor`}</h2>\n    <p><inlineCode parentName=\"p\">{`config/gutenberg.php`}</inlineCode>{` contains options related to the editor itself. Options are commented inline for easy reference, but we will run through them here as well.`}</p>\n    <h3 {...{\n      \"id\": \"use-wordpress-default-block-styles\"\n    }}>{`Use WordPress Default Block Styles`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Core blocks include default styles. The styles are enqueued for editing but are not enqueued for viewing unless the theme opts-in to the core styles. Setting this option to true will enqueue these default styles.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"editor-color-palette\"\n    }}>{`Editor Color Palette`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Different blocks have the possibility of customizing colors. The block editor provides a default palette, but a theme can overwrite it and provide its own.`}</p>\n    </blockquote>\n    <p>{`Set this value to an array of colors appropriate for your project. Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`[\n    [\n        'name' => __('Scarlet', 'themeLangDomain'),\n        'slug' => 'scarlet',\n        'color' => '#C31425',\n    ],\n    [\n        'name' => __('Kuroi', 'themeLangDomain'),\n        'slug' => 'kuroi',\n        'color' => '#101820',\n    ],\n],\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"the-rest-of-them-options\"\n    }}>{`The rest of them options:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Use WordPress Default Block Styles\n    |--------------------------------------------------------------------------\n    |\n    | Core blocks include default styles. The styles are enqueued for editing\n    | but are not enqueued for viewing unless the theme opts-in to the core\n    | styles. Enable to utilize these default styles in your theme.\n    |\n    | @link https://developer.wordpress.org/block-editor/developers/themes/theme-support/#default-block-styles\n    |\n    */\n\n    'defaultBlockStyles' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Editor Color Palette\n    |--------------------------------------------------------------------------\n    |\n    | Different blocks have the possibility of customizing colors. The block\n    | editor provides a default palette, but a theme can overwrite it and provide\n    | its own.\n    |\n    | @link https://developer.wordpress.org/block-editor/developers/themes/theme-support/#block-color-palettes\n    |\n    */\n\n    'colorPalette' => [\n        [\n            'name' => __('native scarlet', 'themeLangDomain'),\n            'slug' => 'native-scarlet',\n            'color' => '#C31425',\n        ],\n        [\n            'name' => __('kuroi', 'themeLangDomain'),\n            'slug' => 'kuroi',\n            'color' => '#101820',\n        ],\n        [\n            'name' => __('very light gray', 'themeLangDomain'),\n            'slug' => 'very-light-gray',\n            'color' => '#eee',\n        ],\n        [\n            'name' => __('dark gray', 'themeLangDomain'),\n            'slug' => 'very-dark-gray',\n            'color' => '#444',\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Disable Custom Color Palettes\n    |--------------------------------------------------------------------------\n    |\n    | This flag will make sure users are only able to choose colors from the\n    | editor-color-palette the theme provided or from the editor default\n    | colors if the theme did not provide one.\n    |\n    | @link https://developer.wordpress.org/block-editor/developers/themes/theme-support/#disabling-custom-colors-in-block-color-palettes\n    |\n    */\n\n    'disableCustomUserColors' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Editor Font Sizes\n    |--------------------------------------------------------------------------\n    |\n    | Block view composers provide a more convenient method for registering\n    | blocks and also allow blocks to be rendered using certain Blade views.\n    |\n    | @link https://developer.wordpress.org/block-editor/developers/themes/theme-support/#block-font-sizes\n    |\n    */\n\n    'fontSizes' => [\n        [\n            'name' => __('Small', 'themeLangDomain'),\n            'size' => 12,\n            'slug' => 'small'\n        ],\n        [\n            'name' => __('Normal', 'themeLangDomain'),\n            'size' => 16,\n            'slug' => 'normal'\n        ],\n        [\n            'name' => __('Large', 'themeLangDomain'),\n            'size' => 36,\n            'slug' => 'large'\n        ],\n        [\n            'name' => __('Huge', 'themeLangDomain'),\n            'size' => 50,\n            'slug' => 'huge'\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Disable Custom Color Palettes\n    |--------------------------------------------------------------------------\n    |\n    | This flag will make sure users are only able to choose font sizes from the\n    | font_sizes the theme provided or from the editor default\n    | font_sizes if the theme did not provide one.\n    |\n    | @link https://developer.wordpress.org/block-editor/developers/themes/theme-support/#disabling-custom-font-sizes\n    |\n    */\n\n    'disableCustomUserFontSizes' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Editor Styles\n    |--------------------------------------------------------------------------\n    |\n    | Block view composers provide a more convenient method for registering\n    | blocks and also allow blocks to be rendered using certain Blade views.\n    |\n    | @link https://developer.wordpress.org/block-editor/developers/themes/theme-support/#editor-styles\n    |\n    */\n\n    'supportEditorStyles' => true,\n    'supportDarkEditorStyles' => false,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Block Alignments\n    |--------------------------------------------------------------------------\n    |\n    | Some blocks such as the image block have the possibility to define a\n    | “wide” or “full” alignment by adding the corresponding classname to\n    | the block’s wrapper (alignwide or alignfull).\n    |\n    | @link https://developer.wordpress.org/block-editor/developers/themes/theme-support/#wide-alignment\n    |\n    */\n\n    'supportWideAlign' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Responsive Embeds\n    |--------------------------------------------------------------------------\n    |\n    | The embed blocks automatically apply styles to embedded content to\n    | reflect the aspect ratio of content that is embedded in an iFrame. To\n    | make the content resize and keep its aspect ratio, the <body> element\n    | needs the wp-embed-responsive class.\n    |\n    | @link https://developer.wordpress.org/block-editor/developers/themes/theme-support/#responsive-embedded-content\n    |\n    */\n\n    'supportResponsiveEmbeds' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Display Reusable Blocks in the Admin Menu\n    |--------------------------------------------------------------------------\n    |\n    | By default, Reusable Blocks are a built-in posttype which is not\n    | displayed in the admin menu. Setting to true will display them the same\n    | as any normal WordPress posttype.\n    |\n    */\n\n    'unlockReusableBlocks' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Reusable Blocks Icon\n    |--------------------------------------------------------------------------\n    |\n    | Specify an icon to use with the Reusable blocks. Obviously has no effect\n    | if the 'reusable_blocks_unlock' config flag is not set to \\`true\\`.\n    |\n    */\n\n    'reusableBlocksIcon' => 'dashicons-layout',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Display Reusable Blocks in the Admin Menu\n    |--------------------------------------------------------------------------\n    |\n    | Modify the labels used for Reusable blocks.\n    |\n    */\n\n    'reusableBlocksLabels' => [\n        'name'                     => _x('Blocks', 'post type general name', 'gutenberg'),\n        'singular_name'            => _x('Block', 'post type singular name', 'gutenberg'),\n        'menu_name'                => _x('Blocks', 'admin menu', 'gutenberg'),\n        'name_admin_bar'           => _x('Block', 'add new on admin bar', 'gutenberg'),\n        'add_new'                  => _x('Add New', 'Block', 'gutenberg'),\n        'add_new_item'             => __('Add New Block', 'gutenberg'),\n        'new_item'                 => __('New Block', 'gutenberg'),\n        'edit_item'                => __('Edit Block', 'gutenberg'),\n        'view_item'                => __('View Block', 'gutenberg'),\n        'all_items'                => __('All Blocks', 'gutenberg'),\n        'search_items'             => __('Search Blocks', 'gutenberg'),\n        'not_found'                => __('No blocks found.', 'gutenberg'),\n        'not_found_in_trash'       => __('No blocks found in Trash.', 'gutenberg'),\n        'filter_items_list'        => __('Filter blocks list', 'gutenberg'),\n        'items_list_navigation'    => __('Blocks list navigation', 'gutenberg'),\n        'items_list'               => __('Blocks list', 'gutenberg'),\n        'item_published'           => __('Block published.', 'gutenberg'),\n        'item_published_privately' => __('Block published privately.', 'gutenberg'),\n        'item_reverted_to_draft'   => __('Block reverted to draft.', 'gutenberg'),\n        'item_scheduled'           => __('Block scheduled.', 'gutenberg'),\n        'item_updated'             => __('Block updated.', 'gutenberg'),\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Enable reusable blocks GraphQL Endpoint\n    |--------------------------------------------------------------------------\n    |\n    | This flag does not do anything if wpgraphql/wpgraphql is not present\n    | in this environment\n    |\n    | @link https://github.com/wp-graphql/wp-graphql\n    |\n    */\n\n    'reusableBlocksUseGraphQL' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Reusable blocks ACL\n    |--------------------------------------------------------------------------\n    |\n    | Modify the permissions for reusable blocks\n    |\n    */\n\n    'reusableBlocksCapabilityType' => 'block',\n\n    'reusableBlocksCapabilities' => [\n        'read'         => 'read_blocks',\n        'create_posts' => 'create_posts',\n    ],\n];\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}